
@ 해시 함수
    - 임의의 길이를 갖는 임의의 데이터에 대해 '고정된 길이의 데이터'로 매핑하는 함수

    키(Key) : 매핑 전 원래 데이터의 값
    해시 값(hash value) : 매핑 후 데이터의 값
    해시 테이블(Hash table) :해시 값 + 데이터의 색인주소(index) (키 값의 연산에 의해 직접 접근이 가능한 구조)
    해싱(hashing) : 매핑하는 과정  (해시 테이블을 이용한 탐색)

@ 특징
    1. 입력 정보(키)가 조금이라도 바뀌면 결과 값(해시 값)이 크게 달라짐
    2. 메시지 다이제스트 충돌이 일어날 가능성이 매우 낮음
    3. 메시지 다이제스트를 통해 원래의 입력 값을 추측하기 어려움(해쉬 함수의 단방향성)
        * 메시지 다이제스트 충돌 : 다른 입력에 대해 같은 결과 값이 출력되는 상태 
    4. 키가 필요 X

@ 단점
    - 해시 충돌 발생
    - 공간 효율성 떨어짐 -> 데이터 저장되기 전에 미리 저장공간을 확보해야됨. -> 공간이 부족하거나 남는 경우 발생



@ 해시를 사용하는 자료 구조
    1. 효율적인 데이터 관리
        - 적은 리소스로 많은 데이터를 관리
    2. 빠른 데이터 처리
        - 색인(index)에 해시 값을 사용함으로써 (정렬을 하지 않고) 모든 데이터를 살피지 않아도
            검색과 삽입/삭제를 빠르게 수행함


@ 보안 분야에서 해시를 사용하는 이유
    - 키와 해시값 사이에 직접적인 연관이 없기 때문에 해시 값만 가지고는 키를 복원하기 어렵다
    - 해시 함수의 결과문은 고정된 길이의 숫자이므로, 원래의 정보는 손실되어 원데이터를 알 수 없다. 
    - 데이터의 무결성(위변조가 일어나지 않았다는 검증) 
    -   -> 동일한 값을 입력하면 언제나 동일한 결과 값을 출력하기 때문 
    - 복호화 불가능 (단방향 암호화에서도 쓰임)
        -> 비밀번호와 같이 데이터가 유출되어도 원본 데이터의 유추가 불가능

@ 알고리즘
    - MD, SHA
    - 복호화가 불가능하고 암호화된 문장으로 비교 (단방향)
    * SHA (Secure Hasg Algorithm)
        - SHA-1, SHA-2(SHA-256 .... )
    * SHA-1
        - TLS, SSL, PGP, SSH, IPSec 등 많은 보안 프로토콜과 프로그램에서 사용됨
    * SHA-256
        - 대한민국 인터넷뱅킹에 사용.


@ hashing 알고리즘 핵싱
    1.입력 값마다 결과 값이 다르다 -> 같은 입력 값을 입력하면 항상 같은 값을 출력 (데이터 무결성)
    2. 결과 값으로 입력 값을 구할 수 없다 (복호화 불가능)







* 전체적으로 잘 설명됨
https://yjshin.tistory.com/entry/%EC%95%94%ED%98%B8%ED%95%99-%ED%95%B4%EC%8B%9C-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%EC%A4%91
* hashing  알고리즘 종류에 대해 간단히 설명됨
https://m.blog.naver.com/PostView.nhn?blogId=nttkak&logNo=20130240183&proxyReferer=https:%2F%2Fwww.google.com%2F


* 읽어보기 - 안전한 패스워드 저장
https://d2.naver.com/helloworld/318732

https://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98