
<대칭키 알고리즘>
	- 하나의 키를 사용하여 데이터를 암/복호화
	- 암/복호화 Key 는 대칭키 또는 비밀키라고 부름
	- 암/복호화 속도가 빠르고 구현이 용이
	- 블록(Block) 암호 알고리즘과 스트림(stream) 암호 알고리즘으로 나눠짐 
	- 통시 상대방이 많아질 수록 키 관리가 어려움
		- n(n-1)/2 개의 키 필요 
	- 상대방과 안전하게 Key 공유하기 아려움 

@ 스트림 암호 알고리즘
	- 대칭키를 만든 후에 Bit 단위로 XOR 연산으로 암호화
	- RC4, AS/2 등의 알고리즘이 있음
	- 속도는 빠르지만 실무에서는 거의 사용하지 않음
@ 블록 암호 알고리즘
	- 대칭키 알고리즘 중 암/복호화시 데이터를 블록 단위로 처리하는 알고리즘
	- 이제는 쓰면 안되는 DES,
		현재 미국 표준인 AES,
		국내 표준 SEED 등이 있음
	- 블록 크기와 Key 길이는 알고리즘마다 다름
	- SEED는 128bit (16byte), AES는 128, 192, 256bit Key 길이 지원 
	- 일본이 만든 Camellia 는 SSL/TLS에서 많이 사용됨
	- AES는 전 세계 공모를 통해 선정 (벨기에의 암호학자 2명이 제출한 Rijndael이 채택)

	- 

* Padding
	- 블록 암호화에서 Block size 는 고정되어있지만(16byte), 실제 input 메시지는 크기가 다 다르다. 
		마지막 블록은 암호화 전에 padding을 통해 Block size를 맞춰주는 작업이 필요 
		- 평문은 N개의 n비트 블록으로 분할되는데 
		 	만약 평문 크기가 블록 크기의 배수가 아니라면,
		 	 평문의 마지막 블록에 다른 블록들과 동일한 크기로 만들기위함 
	- 부족한 size 만큼 바이트 값을 추가하는 PKCS7 Padding 을 많이 사용
	- 3byte가 부족할 경우 03을 3개 패딩 ※ 이미지 참고 pdding.png

@ 운영 모드 (Operation Mode)
	- 보통 입력 데이터가 블록보다 크므로 암/복호화시 여러 개의 블록이 생성됨
	- 각 블록간의 관계를 처리하는게 운영 모드
	- ECB, CBC, CFR, GCM 등의 모드 

	* ECB (Electronic Code Book)
		- 개별 블록은 각각 암복호화 수행(운영 모드 없음-> ??)
		- 입력 값을  유추할 수 있는 치명적인 문제가 있음 

	* CBC (Cipher Block Chaining)
		- 직전 블록은 다음 블록의 입력으로 사용 
			- 안정성 증대
			- 병렬처리 불가능해서 용량이 클 경우 시간이 오래 걸림
			- 특정 블록만 복호화 불가 
		- 초기 블록 유추 어렵도록 Key 이외에 IV(Initial Vector) 사용 
			- ECB의 단점이 보안되어 역추적이 불가능하지만,
				A를 암호화하여 B가 나왔는데, 이게 진짜 A를 암호화해서 나온 값이 맞는지 검증하는 부분이 없다.
			-> HTTP 환경이나, 메모리 해킹 등을 통하여 중간에 데이터를 가로챈 뒤 가짜 데이터를 전달 받을 경우 검증할 수 없다. 

	* GCM (Galois/Counter mode)
		- CBC의 전달 받은 데이터 검증 할 수 없는 취약점 보완
		** 인증 기능 제공
			- 데이터 값의 HASH가 암호문에 포함되어 있어 복호화 시 실제 그 데이터가 맞는지 검증하는 역할이 추가됨
			-> 중간자 공격을 통하여 데이터가 변조되었을 경우 알아낼 수 있음 
		- 패딩 불필요
		- 병렬 처리 가능 
			- 암/복호화 속도가 매우 빠름 
		- 브라우저와 서버가 지원할 경우 SSL/TLS에서 많이 사용


* key와 IV 생성
	- 대칭키와 IV는 random 값을 생성하여 사용하는 경우가 맣음
	- 암복호화시 Key 와 IV를 입력해야 함
	- Random 값이므로 사람이 기억하고 직접 입력은 불가능


@ 암호화 통신
	- SSH, SSL 등 암호화 통신은 속도 때문에 대칭키 방식을 사용 
	- 대칭키 교환은 공개키 방식의 키 동의나 키 전달을 통해 안전하게 공유
		- 암호화 통신 세션내에서만 사용하므로 Session Key 라고도 부름
	** 키 암호화
		- 수신자가 대칭키 생성후 상대방 공개키로 대칭키를 암호화하여 전달 
		- 상대방은 자신의 개인키로 복호화해서 사용 
		-> 대칭키(보안 취약) 비대칭키(느림)의 각 단점을 보완 
	- SSL은 초기에 키 교환 패킷과 알고리즘 합의 과정이 오래 걸림 
	- SSL 세션이 구축되면 속도가 그리 느리지 않음 
	- SSL 성능을 높이려면 초기 키 교환 부담을 줄이기 위한 Session Key cache 필수 
	- Session timeout 이 너무 크면 취약해지므로 적절한 선에서 타협 



@ 공개키 기반 구조 (Public Key Infrastructure)
	- 공개키 암호화 기술을 바탕으로 디지털 인증서를 발급하고 폐지하고 응용하는 기반
	- 기술뿐만 아니라 법/제도와 정책을 포괄
	- CA가 없을 경우 PIK라 하지 않고 PK라고 지칭
	- PKI는 중앙에 신뢰된 CA가 있으며 하위에 개별 CA를 두어 업무를 위임하는 중앙 집중형 방식 






	


* 블록암호 운영모드 ECB,CBC,CFB,OFB,CTR
	https://webstone.tistory.com/134

