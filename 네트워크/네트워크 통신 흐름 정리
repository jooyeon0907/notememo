
< A PC(10.0.10.30/16) -> B PC(10.0.11.34/16) 데이터 보내기 >

1. 10.0.11.34를 향해 HTTP메시지로 requeset 한다
2. 데이터 암호화
3. socket을 이용하여 데이터를 전송할 창구를 만들어 통신할 준비를 함
    서버 측      : 소켓 생성 ->  bind() -> listen()   ->  accept() -> send()/recv() -> close()
    클라이언트 측 : 소켓 생성 ->                    connect()       -> send()/recv() -> close()
4. tcp를 사용하여 보장되는 전송하기
    3-way-handshaking 과정을 통해 연결을 요청하는 패킷을 보냄
    [ TCP | DATA ]
----------------------------------------------------------------------------- 
5.  IP 헤더에 source IP주소 des IP주소 정보를 담고,
    des IP가 현재 네트워크에 있는지 확인하고 없으면 라우터로 보냄. 
 
    라우터는 IP 헤더에 있는 정보(ip주소)에 따라 패킷을 운반한다.
    라우팅 테이블에 들어있는 ip주소와 서브넷마스크를 이용하여 최적의 경로를 찾아 패킷을 보냄 
        - source IP주소와 des IP주소가 같은 망에 있는지 확인
        - des IP주소의 네트워크 주소가 근접한 망으로 이동 
        - 목적지 주소와 근접한 주소가 없다면 defualt route로 간다. 

6. des MAC 주소가 arp 테이블에 없으면 arp를 통해 맥주소를 알아내어 어떤 포트로 연결할 지 정한다. 
    -> ether 헤더에 source/des MAC주소를 기록
7. 데이터를 전기적 신호로 변환하여 (0과 1로) 케이블을 통해 B 장비로 보냄 
 |
 |
8. 같은 네트워크 망에 있는 라우터에 전기적 신호를 받는다 -> 다시 문자열로 바꿈
9. Ether 헤더를 검사하여 des MAC 주소가 자신의 MAC 주소와 일치하는 비교한다 
    -> 일치하면 상위계층으로 보냄
10. IP헤더를 검사하여 des IP 주소가 자신의 IP 주소와 일치하는지 비교한다 
   -> 일치하면 상위계층으로 보냄


-----------------------------------------------------------------------------   
11. tcp헤더에 데이터들이 누락되지않았는지 확인한다 (신뢰성 보장)     ****** 
12. 소켓을 통해 데이터 전달 
13. 데이터 복호화
14. 웹서버는 요청을 받아서 처리한다 -> http reponse 메시지를 보냄. 


** 소켓을 close()하게 되면 데이터를 창구가 끊어져서
    4 way handshaking 과정을 통해 연결을 종료한다.  ? 








