
@ HTTP (Hyper Text Transfer Protocol)
	- 인터넷에서 데이터를 주고받을 수 있는 응용 계층 프로토콜 (80번 포트) 
	- 정보를 평문(하이퍼 텍스트 문서)으로 주고 받아 누구든 알아볼 수 있는 형식으로 보내지기 때문에
		오가는 정보를 중간에서 탈취당할 위험이 큼 -> HTTPS로 보안 
	
	- World Wide Web에서 이미지, 비디오, 텍스트 HTML 파일 및 쿼리 결과의 형태로 데이터를 전송하기 위해 배포됨.
	- 할당 된 기본 포트는 80번 이지만, 다른 포트도 적용 할 수 잇음
		-> 기본적으로 서로 통신하기 위해 인터넷의 다양한 기계 간의 통신 표준화

	- 음성, 텍스트 또는 비디오와 같은 모든 형태의 데이터를 전송할 수 있음
		-> 클라이언트와 서버가 각자의 끝에서 분석 부분을 처리하기 때문
	- 


	@ HTTP 메시지
		- 서버가 응답할 때 응답에 대한 정보를 담아 클리어언트에게 보내는 메시지 
		- 시작줄, 헤더, 본문으로 구성 

		ex) 요청 HTTP 메시지
		## 시작줄 
		GET https://www.zerocho.com HTTP/1.1  
		## 헤더 : 요청에 대한 정보를 담고 있음. 
		User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) ...
		Upgrade-Insecure-Requests: 1

		## 헤더에서 한 줄 띄고 본문 시작. 요청을 할 때 함께 보낼 데이터를 담는 부분. 
		(본문 없음)

		ex) 응답 HTTP 메시지
		# 첫 줄은 버전 상태코드 상태메시지 (200은 성공적인 요청)
		HTTP/1.1 200 OK
		# 두 번째 줄부터는 헤더 : 웅답에 대한 정보를 담고 있음 
		Connection: keep-alive
		Content-Encoding: gzip
		Content-Length: 35653
		Content-Type: text/html;

		# 본문 : 요청한 데이터를 담음 
		<!DOCTYPE html><html lang="ko" data-reactroot=""><head><title...

		*** curl 로 확인할 수 있음 -> http 를 이용하여 경로의 데이터를 가져옴 
		@ curl
		curl -v 기타 옵션 : 디버깅을 위해 요청과 응답 헤더까지 모두 표시

		curl http://www.xxx.com : 일반 GET 요청 
					명령어를 실행하면 URL 요청을 통해, HTML 문서 형태로 응답 받은 것을 확인할 수 있음.

		-I : 헤더만 가져오기 

		-i : 헤더와 바디까지 가져오기
		
		'>' : 요청
		'<' : 응답




@ HTTPS (Hyper Text Transfer Protocol Secure)
	HTTP + SSL
	- HTTP를 통한 데이터의 보안을 위한 조치 
	- SSL을 사용해 데이터를 한쪽에서 다른 한쪽으로 안전히게 보낼 수 있는지 여부 
		-> 웹서버와 브라우저간 정보를 암호화된 상태로 주고 받음. 
	- 기관으로부터 검증된 사이트만 주소에 HTTPS 사용이 허가되므로 안전하게 사용 가능 
	 	(http를 쓰는 사이트는 주소창에 안전하지 않다는 경고표시가 뜸 ) 
	
	* 보안기능의 원리
		- 암호화, 복호화
		대칭키 - 어떤 키를 암호화 하면 같은 키로 복호화
		비대칭키(공개키) - A를 암호화 하면 B 키로 복호화

	* HTTPS 구현 과정
		- https는 클라이언트와 서버 간의 통신을 제 3자가 인증을 해주어야함
			 -> CA(Certification Authority) : 전자서명 및 암호화를 위한 디지털 인증서 발급, 관리하는 서비스 제공 기관/서버
		- CA는 SSL 인증서를 기준으로 클라이언트가 접속한 서버가 맞는지 확인해줌 
		- SSL 인증서는 클라이언트와 서버 간의 통신을 제 3자가 보증해주는 전자화된 문서.
			인증서를 통해 클라이언트가 접속한 서버가 신뢰할 수 있는 서버인지 판단하고 SSL 통신에 사용될 공개키를 클라이언트에게 전달하는 것. 
		- SSL/TLS handshake을 통한 인증으로 브라우저에 내장된 CA들의 정보를 통해 확인함 (비대칭키 시스템을 사용해서)
		- CA의 인증을 받은 않은 브라우저는 주소창에 경고표시뜸
		**  SSL/TLS handshake?
			- SSL 인증서로 서버가 신뢰할 수 있는지 판단하기 위해서 사용하는 공개키 서명 방식











*
https://medium.com/@lunay0ung/protocol-http%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-84a896c5fc93









@ CA (Certification Authority)
인증기관 주요 역할/기능

  ㅇ 디지털서명의 서명자의 신원을 확인
  ㅇ 서명자로부터 그의 공개키를 맡아 보관 
  ㅇ 대외적으로 서명자와 그의 공개키의 귀속관계를 보장
  ㅇ 인증서 및 인증서폐기목록(CRL)을 발행할 수 있음
  ㅇ 1 이상의 등록기관(RA,Registration Authority)을 지정할 수 있음 

http://www.ktword.co.kr/abbr_view.php?m_temp1=2123


*프로토콜 종류
https://helloworld-88.tistory.com/146