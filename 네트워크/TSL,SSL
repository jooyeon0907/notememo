
@ SSL (Secure Socket Layer) /TLS  (Transport Layer Security)
	- 웹 서버와 사용자의 웹 브라우저 간 통신을 암호화 하는데 사용되는 프로토콜 

@ SSL/TLS handshake ? 
	- 암호화 통신은 일반적으로 TLS/SSL 프로토콜을 사용하여 이루어지는데
	 TLS/SSL 암호화 과정에서 필요한 정보(사용할 암호화 알고리즘, 키)의 교환을 위한 TLS Handshake 과정이 존재
	- SSL/TSL Handshake를 사용하면 SSL 또는 TSL 클라이언트 및 서버가 통신하는 보안 키를 설정할 수 있다.
	- SSL은 CA로부터 서버와 클라이언트 인증을 하는데 사용. 전송계층과 응용계층 사이에서 보안조치를 하는데 사용 
	- TLS로 최근에 부르는데 SSL은 과거 명칭이라서 같은 말.
	- 모든 SSL/TSL 연결은 "Handshake" 과정을 거쳐야 함.
	- handshake 과정 : 통신을 암호화 하는데 사용할 암호화 알고리즘과 키를 결정하고 서버를 확인.
		 실제 데이터 전송을 시작하기 전에 보안 연결이 이루어졌는지 확인. 

@ SSL/TLS 클라이언트와 서버가 통신하는 단계
	1. 사용할 프로토콜 버전에 동의
	2. 암호화 알고리즘 선택
	3. 디지털 인증서 교환하고 유효성 검사하여 서로 인증
	4. 비대칭 암호화 기술을 사용하여 공유 비밀키를 생성.
		그런 다음 SSL 또는 TLS는 공유키를 사용하여 메세지를 대칭 암호화 방식으로 암호화 

@ 대칭키 암호화 vs 공개키 암호화(비대칭 암호화)
	* 대칭키 암호화
		- 암호화에 사용되는 키와 복호화에 사용되는 키가 동일한 기법.
			-> 암호화한 정보를 보낼 때 암호키를 같이 보내야 해서 타인에게 노출되는 경우 보안에 취약해짐.
		- 키 전달 및 관리에 어려움이 있지만 대칭키 암호화는 연산 속도가 빠르다. 
	
	* 공개키 암호화(비대칭키 암호화)
		- 대칭키가 가지는 해킹의 위험을 막고자 나온 것. 공개키(Public key)
		- 암호화와 복호화에 사용하는 키를 분리하는 방식
		- 공개키 암호화는 비밀키 하나만 가지는 대칭 암호화 방식과 다르게
			공개키와 개인키 두 개가 존재한다.
		** 공개키 : 누구에게나 공개 가능한 키
		** 개인키 : 자신만이 갖고 있는 키
		* 공개키로 암호화 하는 경우
			- 상대방의 공개키로 데이터를 암호화하고 전달하면 데이터 전달받은 사람은 자신의 개인키로 데이터 복호화한다.
		* 개인키로 암호화 하는 경우
			- 개인키의 소유자가 개인키의 데이터를 암호화하고 공개키와 함께 전달.
				-> 이 과정에서 공개키와 데이터를 획득한 사람은 공개키를 이용해서 복호화 함.
				-> 데이터 보호의 목적보다는 공개키가 데이터 제공자의 신원 보장하기 위함 
			- 암호화된 데이터가 공개키로 복호화된다는 것은 공개키와 쌍을 이루는 개인키에 의하여 암호화되었음을 뜻함
				-> 데이터 제공자의 신원 확인이 보장된다는 뜻이기 때문에 전자서명에도 이용함.  

@ TLS/SSL handshake 방식에서 사용하는 암호화
	- 'handshake' 그 자체는 비대칭 암호화를 사용. 공개키와 개인키도 각각 별도로 사용됨 
	- 비대칭 암호화 시스템은 높은 오버헤드를 가지고 있기 때문에 모든 보안 과정을 제공하는데 사용할 수 x
	- 그래서 공개키는 handshake 하는 동안 암호 해독을 위한 암호화 및 개인키로 사용되며
		서버와 클라이언트가 각각 새로 생성한 공유키를 설정하고 교환하게 함.
	- 세션 자체는 공유키를 사용하며 대칭 암호화를 수행하기 때문에 실제연결에서 오버 헤드를 줄여줌.


	HTTPS는 HTTP가 보안에 취약한 것을 보완하는 것으로써 'SSL 인증서'를 사용한다.
	클라이언트와 서버간의 HTTPS 통신에 사용되는 전자 문서로 클라이언트는 서버에 접속한 직후
	서버로부터 이 인증서를 내려받아 검증한다. 서버를 신뢰할 수 있는지 판단한 후 통신 이어감.
	인증서에는 서버의 공개키가 담기는데 이 인증서는 CA의 개인키로 암호화 됨.
	브라우저 모든 CA들의 공개키가 가지고 있어서 인증서를 복호화하고 내용을 볼 수 있음.

	* 정리
	1) 인증서에 들어있는 서버의 공개키는 공개키 방식.
	2 서버/클라이언트 양측 모두 pre master secret를 가지고 이 값은 mster secret으로 변환되어
	 	최종적으로 session key가 만들어짐. 서버와 클라이언트 실제 데이터 전송 시 이 session key를 사용해서 암호화/복호화 함(대칭키)
		-> 컴퓨터에 부담을 덜 주기 위해  
	* TLS/SSL handshake 과정
	 https://wangin9.tistory.com/entry/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-URL-%EC%9E%85%EB%A0%A5-%ED%9B%84-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EC%9D%BC%EB%93%A4-5TLSSSL-Handshake 
	 






*
https://howhttps.works/ko/https-ssl-tls-differences/


* 암호화 (비공개키, 공개키 )
https://kswims.tistory.com/112
* HTTPS/ SSL (잘 설명되어있음!)
https://wangin9.tistory.com/entry/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-URL-%EC%9E%85%EB%A0%A5-%ED%9B%84-%EC%9D%BC%EC%96%B4%EB%82%98%EB%8A%94-%EC%9D%BC%EB%93%A4-5TLSSSL-Handshake
https://www.youtube.com/watch?v=H6lpFRpyl14



* ssl
https://yagi815.tistory.com/168