
<라우팅 프로토콜의 구분>
@ Static 라우팅 프로토콜
    - 한 번 정해진 그대로 수행하는 프로토콜 
    - 라우터에 사람이 일일이 경로를 입력해줌 (그 경로 그대로 데이터를 보내기만 하면 됨)
    - 그러므로 라우터 자체에는 부담이 들지 않아 라우팅하는 속도도 빨라지고 라우터의 성능이 좋아지게 됨.
        메모리도 적게 든다.
        라우팅 테이블을 교환할 필요 X
        네트워크의 대역폭을 그만큼 절약할 수 있다.
        보안에 강함 (외부에 자신의 정보를 알리지 않기 때문.)
    - 입력해준 경로에 문제가 발생하면 사람이 다시 그 경로를 고쳐줄 때까지 계속 문제가 있는 경로에 데이터를 보내려고 함. (수동이의 단점)

@ Dynamic 라우팅 프로토콜
    - 상황에 따라서 그때그때 변화가 가능한 프로토콜 (라우터가 알아서 가장 좋은 길을 찾아 가도록 되어 있음 )
    - 라우터가 할 일 이 많아서 라우터에 부담을 준다.
    - 라우팅 프로토콜을 이용해서 어떤 길이 가장 빠른 길인지 계산, 
      시간이 지날 때마다 바뀐 정보는 없는지 계속 확인, 이정표 업데이트 


--------------------------------


@ 디스턴스 벡터 (Distance Vector)
    - 거리(Distance)와 방향(Vector)만을 위주로 만들어진 알고리즘
    - 라우터는 목적지까지의 모든 경로를 자신의 라우팅 테이블 안에 저장하는 것이 아니라
      목적지까지의 거리(홉 카운트 등)와 그 목적지까지 가려면 어떤 인접 라우터를 거쳐서 가야 하는(방향)만을 저장함.
        ** RIP 라우팅 프로토콜에서 최대한 갈 수 있는 홉 카운트의 거리는 ? 15개. 
    - 인접 라우터들과 주기적으로 라우팅 테이블을 겨환해서 자신의 정보에 변화가 생기지 않았는지를 확인하고 관리한다.
    -> 한 라우터가 모든 라우팅 정보를 가지고 있을 필요가 X
        - 라우팅 테이블을 줄일 수 있어서 메모리를 절약하고, 라우팅의 구성자체가 간단하다.
        - 여러 곳에서 표준으로 사용되고 있다
    - 반면, 라우팅 테이블에 아무 변화가 없더라고 주기적으로 업데이트가 일어나기 때문에 트래픽을 낭비하고,
            라우팅 테이블에 변화가 생길 경우 이 변화를 모든 라우터가 알 때까지 걸리는 시간이 느리다.   
                (이웃 라우터와 전달, 전달 하기 때문에)
            ** RIP의 디폴트 라우팅 업데이트 주기 : 30초   
    - 이러한 단점들 때문에 커다란 네트워크에는 적용 X , 작은 규모의 네트워크에 적용하여 장점 살림. 

    ex) RIP(Routing Informatin Protocol), IGRP(Interior Gateway Routing Protocol)
        * RIP : 표준 라우팅 프로토콜
        * IGRP : 시스코에서 만들어낸 프로토콜 (시스코 라우터에서만 사용 가능)
@ 링크 스테이트 (Link State)
    - 한 라우터가 목적지까지의 모든 경로 정보를 다 알고 있다. 
    - 먼저 링크에 대한 정보(어디에 어떤 네트워크가 있고, 거기까지 가려면 어떤 라우터를 통해야한다는 정보들)를 
      토폴러지 데이터베이스로 만들게 된다. 
    - 이렇게 만들어진 토폴러지 데이터베이스를 가지고 라우터는 SPF(Shorttest Path First)라는 알고리즘을 계산하게 됨 
        * SPF - 어디로 가야 가장 빨리갈 수 있는가를 계산 
    - 이 계산 결과를 가지고 라우터는 SPF 트리를 만들게 된다.
        * SPF 트리 - 출발지에서 목적지까지를 마치 나뭇가지처럼 펼쳐 놓은 다음 가장 빠른 경로를 찾아가는 방식 
    - 이렇게 트리가 만들어지면 라우터는 그 트리 정보를 이용해서 라우팅 테이블을 만들게 된다. 

    - 중간에 링크의 변화가 생겨도 이를 알아내는데 시간이 짧게 걸림 
    - 라우팅 테이블의 교환이 자주 발생하지 않고, 또 교환이 일어나는 경우에도 테이블에 변화가 있는 것만 교환
        -> 트래픽 발생을 줄여줌. 
    - 라우터가 모든 라우팅 정보를 관리해야하기 때문에 메모리를 많이 소모, 여러 가지를 계산해여되서 CPU 부담.
    - 커다란 네트워크에 설치되는 고용량 라우터에 적용. 

    ex) OSPF(Open Shorttest Path First) , BGP(Border Gateway Protocol)
