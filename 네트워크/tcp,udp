

@ Transport Layer
	- End Poin간 '신뢰성' 있는 데이터 '전송'을 담당하는 계층 
	* 신뢰성 : 데이터를 순자적, 안정적인 전달 (TCP)
	* 전송 : 포트 번호에 해당하는 프로세스에 데이터를 전달
	

@ TCP/ UDP 란?
	- 네트워크 계층 중 전송계층에서 사용하는 프로토콜로써, 목적지 장비까지 전송한 패킷을 상위의 특정 응용 프로콜에게 전달하는 것에 목적이 있음.
	* 전송계층 : 송신자와 수신자를 연결하는 통신 서비스를 제공하는 계층으로, 데이터의 전달을 담당.
	* 패킷(Packet) : 데이터 전송 단위. 한번에 전송할 데이터의 크기를 나타냄.
		ex) 

@ TCP (Transmission Control Protocol) :전송 제어 프로토콜
	- 인터넷상에서 데이터를 메세지의 형태로 보내기 위해 IP와 함께 사용하는 프로토콜
	- 장치들 사이에 접속을 성립하기 위하여 연결을 설정하여 신뢰성을 보장하는 연결형 서비스.
	- 네트워크에 연결된 컴퓨터에서 실행되는 프로그램 간에 
		일련의 옥텟(데이터, 메세지, 세그먼트라는 블록 단위)를 안정적으로, 순서대로, 에러없이 교환할 수 있게 한다.

	* 연결형 서비스로 가상 회선 방식을 제공한다.
		-> 발신지와 수신지를 연결하여 패킷을 전송하기 위한 논리적 경로를 배정. 
		- 3-way-handshaking 과정을 통해 연결을 설정
			 -> 목적지와 수신지를 확실히 하여 정확한 전송을 보장하기 위해서 세션을 수립하는 과정
			 -> 신뢰성보장, 시간 손실 발생, CPU 소모
		- 4-way-handshaking 을 통해 연결을 해제 
			=> connection을 연결 : 양방형 통신

		** 3Way Handshake (연결 수립을 하기 위한 통신)
			: TCP를 이용한 데이터 통신을 할 때 프로세스와 프로세스를 연결하기 위해 가장 먼저 수행되는 과정
			1. 클라이언트가 서버에게 요청 패킷을 보내고  (*** 항상 클라이언트가 먼저 요청)
			2. 서버가 클라이언트의 요청을 받아들이는 패킷을 보내고
			3. 클라이언트는 이를 최종적으로 수락하는 패킷을 보낸다.
		->****** 이 과정이 수립되어야 데이터 전송을 할 수 있음 


	* 흐름제어 (Flow control)
		- 데이터 처리 속도를 조절하여 수신자의 버퍼 오버플로우를 방지
		- 송신하는 곳에서 감당이 안되게 많은 데이터를 빠르게 보내 수신하는 곳에서 문제가 일어나는 것은 막음.
			수신자가 윈도우크기 값을 통해 수신량을 정할 수 있다. 
	
	* 혼잡제어 (Congestion control)
		- 네트워크 내의 패킷 수가 넘치게 증가하지 않도록 방지
		- 정보의 소통량이 과다하면 패킷을 조금만 전송하여 혼잡 붕괴 현상이 일어나는 것을 막음.

	* 신뢰성이 높은 전송 (Reliable transmission)
		- Dupack-based retransmission
		- Timeout-based retransmission 

	* 전이중, 점대점 방식
		- 전이중 (Full-Duplex) : 전송이 양방향으로 동시에 일어날 수 있다.
		- 점대점 (Point to Point) : 각 연결이 정확히 2개의 종단점을 가지고 있다.
		=>> 멀티캐스팅(다:다)이나 브로드캐스팅(1:다)을 지원하지 않는다. 
			 유니캐스팅 방식 -> TCP를 기반으로 하나의 송신자가 다른 하나의 송신자에게 데이터를 전송하는 방식
							-> MAC 주소를 기반으로 상대측 IP주소를 목적지로 하는 일대일 통신 방식. 
							-> 일반적인 인터넷 응용 프로그램이 모두 유니캐스팅 방식 사용 
	- 연속성보다 신뢰성있는 전송이 중요할 때에 사용하는 프로토콜
	-  거의 대부분의 서비스에 적용 (웹, 게임, 파일전송)

	* TCP 서버의 특징
	- 서버소켓은 연결만을 담당.
	- 서버와 클라이언트는 1 대 1로 연결된다.
	- 스트림 전송으로 전송 데이터의 크기가 무제한이다.
	- 패킷에 대한 응답을 해야하기 때문에 (시간 지연, CPU 소모) 성능이 낮다.
	- straming 서비스에 불리하다. (손실된 경우 재전송 요청을 하므로)


@ TCP Header

@ TCP/IP 요약
	- 우리가 사용하는 인터넷은 TCP/IP 기반으로 작동하고 있으며,
		데이터가 전송될 때 패킷이라는 작은 단위로 나뉘어 전송되어,
		송신시 덧붙여 발송되는 header 정보를 통해 어디서 온 데이터인지 누가 받을 데이터인지를 알 수 있고
		여러 경로를 통해 발송된 패킷들은 수신측에서 재조립되어 송신측이 전송한 데이터를 받을 수 있다


@ UDP (User Datagram Protocol) : 사용자 데이터그램 프로토콜
	- 데이터를 데이터그램 단위로 처리하는 프로토콜 
		* 데이터그램 : 독립적인 관계를 지니는 패킷 
	- 비연결지향형 프로토콜 (연결을 위해 할당되는 논리적인 경로가 없음 ->3 way-handshaking X)
		-> 각각의 패킷은 다른 경로로 전송되고, 독립적인 관계를 지니게 됨
	- 정보를 주고 받을 때 정보를 보내거나 받는다는 신호절차를 거치지 않는다.
	- UDP헤더의 CheckSum 필드를 통해 최소한의 오류만 검출.
	- 신뢰성이 낮지만, TCP보다 속도가 빠르다.
	- 신뢰성보다는 연속성이 중요한 실시간 서비스(streaming)에 자주 사용.

	* UDP 서버의 특징
	- UDP에는 연결 자체가 없어서 (connet 함수 불필요) 서버 소켓과 클라이언트 소켓의 구분이 없다. 
	- 소켓 대신 IP를 기반으로 데이터를전송
	- 서버와 클라이언트는 1대1, 1대N, N대N 등으로 연결될 수 있음.
	- 데이터그램(메세지) 단위로 전송되며 그 크기는 65535바이트로, 크기가 초과하면 잘라서 보낸다.
	- 흐름제어(flow control)가 없어서 패킷이 제대로 전송되었는지, 오류가 없는지 확인할 수 없다.
	- 파일 전송과 같은 신뢰성이 필요한 서비스보다 성능이 중요시 되는 경우에 사용된다. 

@ TCP vs UDP	
	이미지파일 참고	
	














* TCP/IP 
https://medium.com/@rlatla626/tcp-ip-%EC%A0%95%EB%A6%AC-204e8a986d98

* 예시 
https://blog.koriel.kr/udp-tcp-tongsin-yeje/

* TCP header 설명 잘 되어있음 
https://velog.io/@hidaehyunlee/TCP-%EC%99%80-UDP-%EC%9D%98-%EC%B0%A8%EC%9D%B4
** 연결방식, 헤더 
https://musclebear.tistory.com/2
https://itigic.com/ko/tcp-vs-udp-features-uses-differences/

* 비교 
https://mangkyu.tistory.com/15