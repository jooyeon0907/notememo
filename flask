<flask >
@ db 연결과 종료
	- before_request()와 teardown_request() 데코레이터를 이용해 좀 더 모듈화한다.
	- before_request()는 요청에 앞서서 실행되는 함수 정의.
	- teardown_request()는 응답이 생성된 후에 실행되는 함수 정의.
	- g 객체는 전역(global) 객체를 의미하며 한 번의 요청에 대해서만 같은 값을 유지하고 스레드에 대해 안전하다는 전제 조건이 있다. 


@ flask.g 
	- 글로벌 변수. 각 요청에 대해 고유한 트수 객체
	- 응용 프로그램 컨텍스트 동안 데이터를 저장할 수 있는 네임 스페이스 개체.(Application Context   영역)
	- 요청 중에 리소스를 저장하기 좋은 장소. - 프록시 
	- Flask에서 g 객체는 스레드와 각각의 request 내에서만 값이 유효한 스레드 로컬 변수
		사용자의 요청이 동시에 들어오더라도 각각의 request 내에서만 g 객체가 유효하기 때문에 사용자 ID를 저장해도 문제가 없다. 
------
@ 컨텍스트 전역 변수
	- 수신한 HTTP request 정보에 접근하기 위해서 컨텍스트 전역 변수를 사용한다.
		이런 정보들을 리퀘스트를 수신할 때 마다 뷰 함수의 인자로 넘기도록 해도 되는데,
		쓸데없이 인자를 많이 가지고 있게 되는 것을 피하기 위해 플라스크는 이를 전역 변수 형식으로 제공한다.
		but 실제 전역 변수는 아님 -> 멀티스레드 환경에서 사용 X
		request 변수가 전역변수처럼 동작하기는 하지만 실제로는 스레드들은 각각 다른 오브젝트를 처리하게 된다. 
	* 컨텍스트는 어플리케이션 컨텍스트/리퀘스트 컨텍스트로 나눌 수 있다.
		- 어플리케이션 컨텍스트 : current_app, g
		- 리퀘스트 컨텍스트 : request, session
		-> 컨텍스트가 push되어야 사용 가능하다 

@ json 데이터, 또는 dic 데이터를 {{ }} 템플릿으로 리턴할 때
	-	 ajax가 아니라, 그냥 페이지에 포함되어 있는 템플릿으로 json 데이터를 전달할 때는 그냥 " 같은게 escape 돼버린다
			var o = {{ dic }}
			-> var o = [ {&#34; id&#34; : ..... }]
		->  escape를 안하면 됨 
			{% autoescape fasle %}   
				var module_list = {{ module_list }};	
			{% endautoescape%}
	* https://umbum.dev/785
--------
@ 리다이렉션과 에러
	*redirect() : 사용자가 다른 엔드포인트로 redirect 함
	* abort() : 에러코드를 가지고 일찍 요청을 중단함 
		 ex) abort(401) -> 401페이지로 redirect됨 
	* @errorhandler()

@ 응답에 관하여
	- view 함수로부터 반환되는 값은 자동으로 reponse 객체로 변환됨. 



* Flask 듀토리얼
https://flask-docs-kr.readthedocs.io/ko/latest/testing.html
---------

* 기본 애플리케이션 구조 
https://sw-ko.tistory.com/82



